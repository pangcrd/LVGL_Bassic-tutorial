/** 
/////////////////////////////////////////////////////////////////////////////
//                                                                         //
// Example LVGL 80x160 0.9" screen CONTROL: UI object                      // 
// Design UI on Squareline Studio. LVGL V9.1                               //
// Youtube:https://www.youtube.com/@pangcrd                                //
// Github: https://github.com/pangcrd                                      //
//                                                                         //
/////////////////////////////////////////////////////////////////////////////*/

#include <lvgl.h>
#include <TFT_eSPI.h>
#include <ui/ui.h>
#include "EncoderRead.h"


EncoderRead encoder(33, 32, 34); //PinA, PinB,buttons (PinA and PinB must be connected to interrupt-supported pins).
//declare the function to create a group and input device for the rotary encoder
lv_indev_t *encoder_indev = NULL;

lv_group_t *groups; 
lv_obj_t *screens;  

/*Don't forget to set Sketchbook location in File/Preferences to the path of your UI project (the parent foder of this INO file)*/

/*Change to your screen resolution*/
static const uint16_t screenWidth  = 160;
static const uint16_t screenHeight = 80;

enum { SCREENBUFFER_SIZE_PIXELS = screenWidth * screenHeight / 10 };
static lv_color_t buf [SCREENBUFFER_SIZE_PIXELS];

TFT_eSPI tft = TFT_eSPI( screenWidth, screenHeight ); /* TFT instance */

#if LV_USE_LOG != 0
/* Serial debugging */
void my_print(const char * buf)
{
    Serial.printf(buf);
    Serial.flush();
}
#endif

/* Display flushing */
void my_disp_flush (lv_display_t *disp, const lv_area_t *area, uint8_t *pixelmap)
{
    uint32_t w = ( area->x2 - area->x1 + 1 );
    uint32_t h = ( area->y2 - area->y1 + 1 );

    if (LV_COLOR_16_SWAP) {
        size_t len = lv_area_get_size( area );
        lv_draw_sw_rgb565_swap( pixelmap, len );
    }

    tft.startWrite();
    tft.setAddrWindow( area->x1, area->y1, w, h );
    tft.pushColors( (uint16_t*) pixelmap, w * h, true );
    tft.endWrite();

    lv_disp_flush_ready( disp );
}

/*========== Read the encoder rotary ==========*/
void my_encoder_read (lv_indev_t *indev_drv, lv_indev_data_t * data)
{
    static int32_t last_counter = 0;

    int32_t counter = encoder.getCounter();
    bool btn_state = encoder.encBtn();

    data->enc_diff = counter - last_counter;
    data->state = btn_state ? LV_INDEV_STATE_PRESSED : LV_INDEV_STATE_RELEASED;

    last_counter = counter;
}
/*Set tick routine needed for LVGL internal timings*/
static uint32_t my_tick_get_cb (void) { return millis(); }

/** ========== Group and config input device ==========*/
//  void group_init(){

//     // Number of screen and group
//     groups = lv_group_create(); 
 
//     // Add obj into group
//     lv_group_add_obj(groups, ui_Button1);
//     lv_group_add_obj(groups, ui_Button2);
// ;
    
//     // Set group for encoder.
//     lv_indev_set_group(encoder_indev, groups);
//     //lv_scr_load(screens);

// }

// void show_loading_cb(lv_timer_t * timer) {
//     _ui_screen_change(&ui_Screen2,LV_SCR_LOAD_ANIM_MOVE_LEFT, 10, 0, &ui_Screen2_screen_init);
//     //lv_scr_load_anim(ui_Screen2, LV_SCR_LOAD_ANIM_NONE, 10, 0, false);
//     lv_timer_del(timer);
// }

void startupSound(void *pvParam) {

    /** Nitendo sound */
    // int melody[]   = { 659, 784, 880, 988, 1046 };  
    // int duration[] = { 100, 100, 100, 100, 200 };
    /** System boot sound */
    int melody[]   = { 1319, 880, 1760 };  
    int duration[] = { 100, 150, 250};
    /** e - ooo - eeeee */
    // int melody[] = { 880, 1046, 1319 };      
    // int duration[] = { 150, 150, 200 };

    const int length = sizeof(melody) / sizeof(melody[0]);

    for (int i = 0; i < length; i++) {
        tone(25, melody[i], duration[i]);
        vTaskDelay(pdMS_TO_TICKS(duration[i] + 110));
    }

    noTone(25);
    vTaskDelete(NULL);
}


void setup ()
{
    Serial.begin( 115200 ); /* prepare for possible serial debug */

    pinMode(25,OUTPUT); /** Buzzer */

    lv_init();

// #if LV_USE_LOG != 0
//     lv_log_register_print_cb( my_print ); /* register print function for debugging */
// #endif

    tft.begin();          /* TFT init */
    tft.setRotation(3); /* Landscape orientation, flipped */

    static lv_disp_t* disp;
    disp = lv_display_create( screenWidth, screenHeight );
    lv_display_set_buffers( disp, buf, NULL, SCREENBUFFER_SIZE_PIXELS * sizeof(lv_color_t), LV_DISPLAY_RENDER_MODE_PARTIAL );
    lv_display_set_flush_cb( disp, my_disp_flush );

    //Initialize the Rotary Encoder input device. For LVGL version 9+ only
    encoder_indev = lv_indev_create();
    lv_indev_set_type(encoder_indev, LV_INDEV_TYPE_ENCODER);
    lv_indev_set_read_cb(encoder_indev, my_encoder_read);

    lv_tick_set_cb( my_tick_get_cb );

    ui_init();
    //group_init();
    
    Serial.println( "Setup done" );

    //lv_timer_create(show_loading_cb, 2000, NULL);
    xTaskCreatePinnedToCore(startupSound,"StartupSound",2048,NULL,2,NULL,0 );
}

void loop ()
{
    lv_timer_handler(); /* let the GUI do its work */
    delay(5);
}
